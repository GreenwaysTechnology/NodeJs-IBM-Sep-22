				Modularity


Javascript modularity:


Modularity:
..........

In java Modularity , is presented via "Packages"

Package organize the code  logically.

Customer.java

package com.ibm.cms

public class Customer{}

Java organizes code folders and files Physically.

d:/javaapps/src/
    com/ibm/cms/Customer.java


What about javascript Modularity?

 Javascript is file based modularity physically
 but logically there is no such modularity at language level.

collection of variable declarations and function.

Once js started growing in large scale, dev struck to organize code.

2000, Smart developers started thinking about how to modualrize js code.
 

Module design patterns came.

1.Namespace design pattern : 2000 : jquery
2.AMD -Async Module Defintion : dojo
---------------------------------------------------------
3.CJS - Common JS =  namespace + amd
4.ES 6 Module design pattern  = amd + cjs
------------------------------------------------------------
5.System = AMD = CJS + ES 6
6.UMD = NAMESPACE + AMD + CJS = ES 6
.....................................................................................
				Common js
.....................................................................................

keywords:
Code Sharing:

code could be variable declaration,function declaration,class declaration.

exports
module.exports

//Linking files and get shared code.
require()

src/mylib.js
//variable can hold any literal
//cjs packs the code within object if you use exports keyword
//strings 
exports.firstName = 'Subramanian'
exports.lastName = 'Murugan'
exports.age = 18
exports.status = true
exports.skill = ['Java', 'Js']
exports.address = {
    city: 'Coimbatore'
}
src/index.js
//main file 
const info = require('./mylib')
console.log(info)

console.log(`Name ${info.firstName} ${info.lastName}`)
console.log(`Age ${info.age}`)
console.log(`Status ${info.status}`)
.....................................................................................
			How to share code via Subfolders


src/mock-data/user.js
exports.user = {
    id: 1,
    name: 'Subramanian',
    address: {
        city: 'Coimbatore'
    }
}

src/index.js
const user = require('./mock-data/user')

console.log(user)
......................************************.......................................

exports will pack the code into an object , then it will be returned to another file where we are invoking.

behind the scene the exports is variable holding empty object by default.

let exports = {}


exports.id = 1
{id:1}
exports.name ='Subramanian'
{id:1,name:'Subramanian' user:{}}

module.exports:

  Which does not pack the code into object,rather will return as it is.

const id=1

module.exports = id

module.exports = variable / func/array/object/class


src/util/StringUtil.js
class StringUtil {
    constructor() {

    }
    captalize() {
        return 'Capitalize api'
    }
}
//how to share this class outside
// module.exports = StringUtil;

//how to return object 
module.exports = new StringUtil()

src/index.js
const StringUtil = require('./util/StringUtil')

console.log(StringUtil)
// let strutil = new StringUtil()
// console.log(strutil.captalize())
console.log(StringUtil.captalize())


src/mock-data/products.js
//products
// const products = [
//     {
//         id: 1,
//         name: 'foo',
//         price: 10.5
//     }
// ]
// module.exports = products
module.exports = [
    {
        id: 1,
        name: 'foo',
        price: 10.5
    }
]

index.js
const Products = require('./mock-data/products')

console.log(Products)
.....................................................................................
				ES 6 modules
....................................................................................

ES 6 modules are enchanced version of CJS.
ES 6 modules are introduced in ES 6 language spec.

ES 6 modules are not directly supported by browser and node, but latest version of browsers and node supports with some configuration.

How to share code?
 export,export default

How to import code?
 import

src/util/myutil.js
//share string,number,booleans,objects,arrays

export const name = 'Subramanian'
export const age = 18
export const status = true
export const skills = ['java', 'js', 'react', 'microservices']
export const calculate = () => 100
export const address = {
    city: 'Coimbatore'
}

src/index.js
import { name, age, status, skills, calculate, address } from './util/myutil.js'

console.log(name,age,status,skills,calculate(),address)
......................................................................................
			 ES 6 Modules Patterns

src/util/myutil.js

//share string,number,booleans,objects,arrays
    export const name = 'Subramanian'
    export const age = 18
    export const status = true
    export const skills = ['java', 'js', 'react', 'microservices']
    export const calculate = () => 100
    export const address = {
        city: 'Coimbatore'
 }
src/index.js
import { name, age, status, skills, calculate, address } from './util/myutil.js'

console.log(name,age,status,skills,calculate(),address)
...............

export default:

src/util/CustomerService.js

// export  default class CustomerService {

// }

class CustomerService {
    constructor() {
        console.log('CustomerService')
    }
    list() {
        return [{
            id: 1,
            name: 'A'
        }]
    }
}

export default CustomerService;

index.js
import CustomerService from "./util/CustomerService.js";

let custService = new CustomerService();
console.log(custService.list())

Old node js does not support es 6 modules directly, modern node supports es 6 module via flag "type":"module"

package.json
{
  "name": "es6moduleapps",
  "version": "1.0.0",
  "main": "index.js",
  "type": "module",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": ""
}





















