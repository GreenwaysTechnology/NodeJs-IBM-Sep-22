
1.ES 6

2.Node.js

3.Microservices implmentation on node.js
..............................................................................................

Software setup:

Node.js
vs code
..............................................................................................
				 Java Script
.............................................................................................

What is Java Script?

 Java script is programming language.
 
 Java script is Object based, functional style, event driven programming language.

Why Java script was created?

  Java script was created for manipulating web documents(html) inside web browser.
  All Browser based apps called DOM programming is done using js.
  All User interface tech based on javascript.

Versions of javascript:

The js was created in 1995, available to public 1996 after standarization by ECMA committee

ES /JS 1.0 --1997
ES 3 -1999
 2005 - AJAX 
ES 4 -2007
 2008- Node.js Was created 
ES 5- 2008
ES 6  - 2012---2015
ES 7 -2016
..........

Language Learning Path

1.Language fundamentals
2.Functional programming and implementation
3.Object based features
...............................
   
4.Browser App dev - DOM Programming

The first 3 features are used inside browser and node.js apps.
.............................................................................................
				Language fundamentals


1.type system
2.variables
3.values

Based on data type:

- static programming language/strongly typed programming language

  if language compiler verifies , the type of variable during compile time, those languages
are called static programming language.

  int a=10;
  a="hello" ; compile time error.


- dynamic programming language/weakly typed programming language
 
  if language compiler verifies , the type of variable during runtime time, those languages
are called dynamic/weakly typed programming language.

  var i=10
  i="hello" // no error


JS follows dynamic typed.


1. java  script fundamentals

variable,types, values.

javascript is untyped/dyamic typed language.

keyword variableName=value(literals)

var | let | const | this | variablename=literal

var-es5
let and const -es6 to replace var.

this - for object variables

literals - values: based on literal only the type of variable is decided during runtime.

types of literals

1.string
2.number
3.boolean
4.undefined
5.nan
6.infinity
7.null
8.function
9.object

types ;

1.string
2.number - number,infinity,NaN
3.boolean
4.undefined
5.function
6.object - null, object

.................

Project setup:

Steps:

1.mkdir es6-apps
2.cd es6-apps
3.mkdir src
4.cd src
5.code .

file Name :
  index.js

How to run javascript?

1.inside web browser
   Every web browser has built in javascript runtime which includes compilers, interpreter

JS engine / runtime:

Chrome - V8
Edge - Chakra
FireFox - Spider Monkey


2.on Node.js
  It is platform used to run js programs.
  Node.js built on the top of google V8 Engine.
 

How to run js on node platform?

>>node src/index.js
Hello Node Js
.....................................................................................
types of literals

1.string
2.number
3.boolean
4.undefined
5.nan
6.infinity
7.null
8.function
9.object

types ;

1.string
2.number - number,infinity,NaN
3.boolean
4.undefined
5.function
6.object - null, object



strings 

1. declared using  "" ,'',``(es6)
2. 16 bit unicode character

`` - back tick notation:

-string interpolation
-multi line string literal

//strings
var firstName = "Subramanian";
let lastName = 'Murugan';
//string concatnation: + , `${}-string interpolation`
console.log(" Name " + firstName + " " + lastName);
console.log(" Name ", firstName, " ", lastName);
//String interpolation : es 6 ;  String template literal
console.log(`Name ${firstName} ${lastName}`);
//multi line strings using es 5 pattern:
let title = 'IBM'
let doc = "<html>" +
    "<head>" +
    "<title>" + title + "</title>" +
    "</head>" +
    "<body>" +
    "<h1>Hello</h1>" +
    "</body>";
console.log(doc)

let docOne = `<html>
           <head>
            <title>${title}</title>
            </head>
          <body>
            <h1>Hello</h1>
          </body>
        `;
console.log(docOne)


2.Numbers

-all numbers size is 64 bit aka double.

let salary = 10000;
console.log(`Salary ${salary}`);
let totalSalary = salary * 100
console.log(`Total salary ${salary}`);

2.boolean

- 1 bit value eiether 0 or 1;
- offers built in literal value called true/false


3.undefined:
 -undefined; if variable declared but not initalized with any valid literals

let cost;
console.log(`cost ${cost}`);


4.NaN -  Not a Number

 -NaN - not a number; it is numerical error code.during numerical computation, 

js engine
 -may throw error - NaN ; 
 -NaN is not valid value, it is error , need to be fixed if you get.

when you will get NaN.
1.if you do compuation against undefined variables.

//numerical computation against undefined
let qty; //undefined
let price = 100;
let totalPrice = qty * price;
console.log(`Totatl Price is ${totalPrice}`)


2. when you do type conversion ; string to number.
	type conversion; implict and explict.  String to Number

//type conversion:implicit
let x = "10";
let y = 10;
let c = x * y;
console.log(`C ${c}`)

//explicit
let d = parseFloat(x) * y;
console.log(`D ${d}`)

//Nan and type conviersion
x = "$20";
c = x * y;
console.log(`C ${c}`)

d = parseFloat(x) * y;
console.log(`D ${d}`)

5.infinity

-div/0 -

let x =100;
let y =0
let c = x/y;
console.log(`C ${c}`)

How to know the runtime data type of variable?

-typeof operator.

let a = 10;
console.log(`a type is ${typeof a}`);
a = 'Hello';
console.log(`a type is ${typeof a}`);
a = true;
console.log(`a type is ${typeof a}`);
a = undefined;
console.log(`a type is ${typeof a}`);
a = 10 * undefined; //NaN --->number type
console.log(`a type is ${typeof a}`);
a = 100 / 0;
console.log(`a type is ${typeof a}`);
///////////////////////////////////////////////////////////////////////////////////////////

Advanced boolean :
...................

What can be true or false?

decision making : if..else

in javascript is every thing is true execept the following values 

Falsy values

 * 
 *  1.boolean false
 *  2.Empty string "" ,''
 *  3.0
 *  4.undefined
 *  5.NaN
 *  6.null
 */
let isActive = true;

if (isActive) {
    console.log('Active')
} else {
    console.log('inactive')
}

let firstName=""
if (firstName) {
    console.log('Name is Present')
} else {
    console.log('Name is not  Present')
}

let start = 0;
if (start) {
    console.log('start')
} else {
    console.log('no start')
}


operators;

equal operators 
   ==, === ,!=,!==

let a = 100;
let b = 100;
//double equal operator
if (a == b) {
    console.log('equal')
} else {
    console.log('not equal')
}
if (a === b) {
    console.log('equal')
} else {
    console.log('not equal')
}


//value is 100 but type is string

let x = "100";
let y = 100;
if (x == y) {
    console.log('equal')
} else {
    console.log('not equal')
}
if (x === y) {
    console.log('equal')
} else {
    console.log('not equal')
}
..........................................................................................

Tenary operator ; to replace if ...else lader

x === y ? console.log('equal') : console.log('not equal')

let firstName = '';

let response = firstName ? 'You have firstName' : 'You dont have'
console.log(response);

//
let x = 100;
let y = 200
if (x === y) {
    console.log('equal')
} else {
    console.log('not equal')
}

x === y ? console.log('equal') : console.log('not equal')


let firstName = '';

let response = firstName ? 'You have firstName' : 'You dont have'
console.log(response);

.............................................................................................

const:

 read only
 once variables are initalized, cant re initalize

//let vs const

let x =100;
console.log(`X ${x}`)
x=900
console.log(`X ${x}`)
const y=100;
console.log(`Y ${y}`)
y=9000; //not possible.
..............................................................................................
				 Functions
..............................................................................................

Function encapsulate the block of code to be executed.

basic function declaration;
-function is keyword to declare function

basics:
 -declaration and invocation

function sayHello() {
    console.log('hello')
}
sayHello()


function validate() {
    let name = 'ram';
    let password = 'ram';
    let response = (name === 'ram') && (password === 'ram') ? 'valid' : 'invalid'
    console.log(response);
}
validate();


////////////////////////////////////////////////////////////////////////////////////////////

Function args and parameters:Basic level

//message is arg
function sayHello(message) {
    console.log(`Message is ${message}`)
}

//'Hello' is parameter
sayHello('Hello');
sayHello();

//default args
function multiply(a = 0, b = 0) {
    let res = a * b;
    console.log(`Result ${res}`)
}
multiply(10, 10)
multiply();

//Rest operator
function log(...message) {
    console.log(message)
}
log('app')
log('app', 'error')
log('app', 'error', 'in myfile.txt')

..........................................................................................

Function Return values:
function getA() {
    return 10; // return hardcoded value
}
let value = getA()
console.log(value);
console.log(getA())
function getB() {
    let b = 10;
    return b; // return variable
}
console.log(getB());

function calculate(a = 1, b = 1) {
    return a * b; // return expression- computed value
}
console.log(calculate(4, 5))


function isValid() {
    return; // undefined
}
console.log(isValid() ? 'valid' : 'invalid')
//////////////////////////////////////////////////////////////////////////////////////////////

Functional Programming:

-function is value / literal

 In fp function that computes data can be stored into a variable like other literals

eg:
  let a =10; // 10 is value and its type is number
  let name ="Subramanian" // it is value and its type is string
  let isValid =true //it is value and its type is boolean

in the similar context , function also value and it has type called function type.

variables can be used for computation,printing.

  eg:
    let res = a *10;
    print res , a;

          "Variables holding functions , can be used invoke functions".



function sayHello() {
    console.log('hello')
}
//invoke the function
sayHello();
//we can assign into  a variable
//way -1
let hello = sayHello;
hello();

//inline assignment : anonmous functions: function without name
//way -2
let hai = function () {
    console.log('hai')
};
hai();

//pass parameters and args

let add = function (a = 0, b = 0) {
    return a + b;
};

console.log(add(1,1))
console.log(add())
///////////////////////////////////////////////////////////////////////////////////////


Arrow Functions:

- ES 6 function literal
- To reduce lot of code- make simple code
- we have some advanced concept like "this" binding.

//arrow functions

//es 5 style
let hai = function () {
    console.log('hai')
};
hai();

//arrow version
hai = () => {
    console.log('hai')
};
hai();

//code refactoring in arrows

// if function has only one line of body: remove {}
hai = () => console.log('hai');
hai();

//args and parameters
let add = (a = 0, b = 0) => {
    return a + b
}
console.log(add(1, 1));

//if function has only one of body with return ; remove {} and return statement
add = (a = 0, b = 0) => a + b
console.log(add(1, 1));

//single param and no default value and return that :remove ()
let display = name => name;
console.log(display('Subramanian'));

..............................................................................................
				Functional Programming and Javascript
.............................................................................................

Functional programming principles:


-Higher Order Functions:
  -Functions can be passed around.
  -Since Function is value, can be passed as parameter to another functions and returned from
   other functions.

//Higher order function: function as parameter.

function add(a, b) {
    return a + b;
}
add(10, 10)
let x = 100;
let y = 200;
add(x, y);


//action : is arg variable,
function connect(servertype = '', action) {
    if (typeof action === 'function') {
        action(servertype);
    } else {
        throw Error('Wrong type')
    }
}
//parameter of function can be anything -numbers,strings...
let webserver = function (server) {
    console.log(server)
}
connect('webserver starts', webserver)
//connect(100)
connect('db server starts', function (server) {
    console.log(server)
})
////////////////////////////////////////////////////////////////////////////////////

function fetchData(success, failure) {
    //biz logic
    let response = 'This is Response'
    //response=undefined
    if (response) {
        success(response)
    } else {
        failure('No data ')
    }

}

fetchData(function (res) {
    console.log(res)
}, function (err) {
    console.log(err)
})

//arrow version

let fetch = (success, failure) => {
    if (typeof success === 'function' && typeof failure === 'function') {
        //biz logic
        let response = 'This is Response'
        //response=undefined
        if (response) {
            success(response)
        } else {
            failure('No data ')
        }
    } else {
        throw Error('Wrong type')
    }

}
fetch(res => console.log(res), err => console.log(err))
//fetch(100,900)
/////////////////////////////////////////////////////////////////////////////////////////////

2.Returning function from another function.

function counter() {
    console.log('outer function')
    return function () {
        return 'innerfunction'
    }
}
let func = counter()
console.log(func());

const outer = () => {
    console.log('outer function')
    return () => 'innerfunction'
};
console.log(outer()())
............................................................................................
Object based Programming:
..........................



//es 5 
function Employee() {
    //instance variables
    this.id = 1;
    this.name = 'subramanian'
    //instance methods
    this.calculateSalary = function () {
        return 10;
    }
}
///emp - reference variable which references the location of object.
//new is keyword - memory allocation operator
//Employee(); Constructor call
let emp = new Employee();
console.log(`Id : ${emp.id} Name : ${emp.name} Salary :  ${emp.calculateSalary()}`)

class Customer {
    //instance variables
    id = 1;
    name = 'subramanian'
    //instance methods
    // calculateSalary = function () {
    //     return 10;
    // // }
    // calculateSalary = () => {
    //     return 10;
    // }
    calculateInvoice() {
        return 10;
    }
}
//cust - reference variable which references the location of object.
//new is keyword - memory allocation operator
//Customer(); Constructor call
let cust = new Customer();
console.log(`Id : ${cust.id} Name : ${cust.name} Invoice :  ${cust.calculateInvoice()}`)


let product = {
    id: 1,
    name: 'Phone',
    // calculateQty: function(){
    //     return 10;
    // }
    // calculateQty: ()=>{
    //     return 10;
    // }
    //es 6 method syntax
    calculateQty() {
        return 10
    },
    save() {
        return 'save'
    },
    findAll() {
        return 'findAll'
    }
};
console.log(`Product id ${product.id} name ${product.name} Qty ${product.calculateQty()} ${product.findAll()} ${product.save()} `)
..............................................................................................



























 